@Chapter The GaussPar package
@Section Introduction
This package implements a parallel GAUSS algorithm over finite fields as described in
@BeginLatexOnly
\footnote{Linton, S., Nebe, G., Niemeyer, A., Parker, R. and Thackray, J. (2018).
A parallel algorithm for Gaussian elimination over finite fields.}
@EndLatexOnly
.
The algorithm divides a given matrix into smaller submatrices (blocks), simultaneously executes the GAUSS algorithm on independent blocks
and propagates the results according to thought out dependencies. We provide two main functions <Ref Func="EchelonMatBlockwise"/>
and <Ref Func="EchelonMatTransformationBlockwise"/>, where the latter additionally computes the transformation matrix in parallel. The naming conventions are chosen in accordance with the GAP package "GAUSS" 
@BeginLatexOnly
\footnote{\url{https://www.gap-system.org/Packages/gauss.html}}
@EndLatexOnly
, which provides an implementation of the sequential GAUSS algorithm. Our functions do currently not support sparse matrices.



NOTES FOR US BELOW



TODO: move this to the right place.
The value of <A>numberBlocks</A> has a big impact on the perfomance of the
algorithms implemented in the GaussPar.

Experiments with matrices over fields of sizes 2 to 11 and dimensions 500 to
10.000 have found values for <A>numberBlocks</A> from 6 to 15 to be acceptable.
Note though, that this highly depends on the calculation, the number of used
threads and the machine itself.

The function <Ref Func="GAUSS_MeasureContention"/> in Chapter
<Ref Chap="Chapter_Finding_a_suitable_number_of_blocks"/>
can be used to find a suitable value systematically.

@Chapter Gaussian Elimination
@Section Gaussian Elimination

This section describes the different variants of our implementation
of the Gaussian algorithm.

@Chapter Finding a suitable number of blocks
@Section Measure Contention


@Chapter Utility Functions
@Section Utility Functions

The following functions were created while implementing the high-level functions,
but we found that they could be useful outside of our functions, too.
You can find the specifications of the functions and some small examples here.
